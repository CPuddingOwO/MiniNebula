name: CI Build

on:
  push:
    tags:        # 仅在创建 tag 时触发构建
      - '*'
  workflow_dispatch:  # 支持手动触发

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        # 为不同系统定义不同的构建工具和编译器
        compiler: [clang]

    runs-on: ${{ matrix.os }}
    timeout-minutes: 50  # 设置构建作业的超时为 50 分钟

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Read Common.txt file and export parameters
      - name: Read Common.txt for Linux
        if: matrix.os == 'ubuntu-latest'
        id: read-common-linux
        run: |
          CMAKE_ARGS=$(cat Scripts/Common.txt | xargs)
          echo "CMAKE_ARGS=$CMAKE_ARGS" >> $GITHUB_ENV

      # Step 2: Read Common.txt file and export parameters on windows
      - name: Read Common.txt for Windows
        if: matrix.os == 'windows-latest'
        id: read-common-windows
        run: |
          $CMAKE_ARGS = ""
          Get-Content "./Scripts/Common.txt" | ForEach-Object {
          $CMAKE_ARGS += " $_"
          }
          echo "CMAKE_ARGS=$CMAKE_ARGS" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8


      # Step 3: Install dependencies (for Linux)
      - name: Install dependencies on Linux
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install ninja-build clang

      # Step 4: Install dependencies (for Windows)
      - name: Install dependencies on Windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install ninja
          choco install llvm
#          choco install directx-sdk
#          curl -L -o w64devkit.zip https://github.com/skeeto/w64devkit/releases/download/v1.17.0/w64devkit-1.17.0.zip
#          7z x w64devkit.zip -oD:/w64devkit
#          echo "w64devkit installed"
#          echo "D:/w64devkit/bin" >> $GITHUB_PATH

      # Step 5: Update Submodules
      - name: Update submodules
        run: git submodule update --init --recursive

      # Step 6: Configure CMake
      - name: Configure CMake
        run: |
          cmake -G Ninja -B build -S . ${{ env.CMAKE_ARGS }}
      #  -DSDL_VIDEO_DRIVER_D3D12=OFF -DSDL_VIDEO_DRIVER_D3D11=OFF

      # Step 7: Build the project
      - name: Build with Ninja
        run: |
          cmake --build build

      # Step 8: Compress build artifacts On Linux
      - name: Compress build artifacts on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          zip build/MiniNebula-${{ matrix.os }}-${{ github.ref_name }}.zip build/compiled/*

      # Step 8: Compress build artifacts On Windows
      - name: Compress build artifacts on Windows
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path "build/compiled/*" -DestinationPath "build/MiniNebula-${{ matrix.os }}-${{ github.ref_name }}.zip"

      # Upload artifacts for both platforms
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: MiniNebula-${{ matrix.os }}-${{ github.ref_name }}
#          path: build/*
          path: build/compiled/*


  release:
    needs: build  # 在构建完成后触发发布
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Create release
      - name: Upload Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/MiniNebula-${{ matrix.os }}-${{ github.ref_name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
